# JWT RS256 Configuration Example
# Workplan Line 622: JWT signing (RS256) for enhanced security

# ============================================
# JWT CONFIGURATION - RS256 (Recommended)
# ============================================

# Algorithm: RS256 (asymmetric) or HS256 (symmetric - legacy)
JWT_ALGORITHM=RS256

# Option 1: Load keys from files (Development/Staging)
JWT_PRIVATE_KEY_PATH=./keys/jwt-private.pem
JWT_PUBLIC_KEY_PATH=./keys/jwt-public.pem

# Option 2: Load keys from environment (Production)
# Base64 encode your keys: cat jwt-private.pem | base64
# JWT_PRIVATE_KEY=<base64-encoded-private-key>
# JWT_PUBLIC_KEY=<base64-encoded-public-key>

# Token Expiry
JWT_EXPIRY=15m
REFRESH_TOKEN_EXPIRY=7d

# Migration Mode
# Set to 'true' during migration to support both HS256 and RS256
# This allows old HS256 tokens to work while new tokens use RS256
JWT_MIGRATION_MODE=true

# Legacy JWT Secret (keep during migration, remove after)
# Required only if JWT_MIGRATION_MODE=true
JWT_SECRET=your-legacy-secret-key-here

# ============================================
# MIGRATION STEPS
# ============================================

# 1. Generate RSA keys:
#    npm run generate:rsa-keys

# 2. Update .env with RS256 configuration (above)

# 3. Enable migration mode:
#    JWT_MIGRATION_MODE=true

# 4. Restart server - new tokens use RS256, old HS256 tokens still work

# 5. Wait for all clients to refresh tokens (7 days = REFRESH_TOKEN_EXPIRY)

# 6. Disable migration mode and remove JWT_SECRET:
#    JWT_MIGRATION_MODE=false
#    # Remove JWT_SECRET line

# 7. All tokens now use RS256 ‚úÖ

# ============================================
# SECURITY NOTES
# ============================================

# ‚úÖ RS256 Benefits:
#    - Asymmetric encryption (public/private key pair)
#    - More secure for distributed systems
#    - Private key never leaves the server
#    - Public key can be shared for token verification
#    - Industry standard for OAuth/OIDC

# ‚ö†Ô∏è  Private Key Security:
#    - NEVER commit private keys to version control
#    - Store in secure location (vault, secrets manager)
#    - Use proper file permissions: chmod 600 jwt-private.pem
#    - Rotate keys periodically (every 6-12 months)

# üì¶ Production Deployment:
#    - Use environment variables (Option 2)
#    - Store keys in AWS Secrets Manager / Azure Key Vault
#    - Use base64 encoding for multiline PEM keys
#    - Enable automatic key rotation

# ============================================
# BACKWARD COMPATIBILITY (HS256)
# ============================================

# If you need to stay with HS256 (not recommended):
# JWT_ALGORITHM=HS256
# JWT_SECRET=your-secret-key-minimum-32-characters-long
# Comment out JWT_PRIVATE_KEY_PATH and JWT_PUBLIC_KEY_PATH

# ============================================
# KEY GENERATION COMMANDS
# ============================================

# Generate RSA key pair (2048-bit):
# npm run generate:rsa-keys

# Or manually:
# openssl genrsa -out keys/jwt-private.pem 2048
# openssl rsa -in keys/jwt-private.pem -pubout -out keys/jwt-public.pem

# Base64 encode for environment variables:
# cat keys/jwt-private.pem | base64 | tr -d '\n'
# cat keys/jwt-public.pem | base64 | tr -d '\n'

# ============================================
# TESTING JWT CONFIGURATION
# ============================================

# Test endpoint (when server is running):
# GET /api/auth/jwt-info
# Returns current JWT configuration and migration status
