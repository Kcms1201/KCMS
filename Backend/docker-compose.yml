services:
  ###################################
  # üóÑÔ∏è MongoDB Database
  ###################################
  mongo:
    image: mongo:7
    container_name: mongo
    restart: always
    environment:
      MONGO_INITDB_DATABASE: KCMS
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  ###################################
  # ‚ö° Redis Cache & Queue Broker
  ###################################
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: always
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

#   ###################################
#   # üß† KCMS Backend (Node.js)
#   ###################################
#   backend:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     container_name: kcms-backend
#     restart: always
#     depends_on:
#       - mongo
#       - redis
#     ports:
#       - "5000:5000"
#     env_file:
#       - .env
#     environment:
#       NODE_ENV: production
#       MONGODB_URI: mongodb://mongo:27017/KCMS
#       REDIS_URL: redis://redis:6379
#       BASE_URL: http://localhost:5000
#       FRONTEND_URL: http://localhost:3000
#     volumes:
#       - .:/usr/src/app
#     command: ["npm", "run", "start"]   # or "node src/server.js" if you prefer
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:5000/health" ]
#       interval: 30s
#       timeout: 10s
#       retries: 5

volumes:
  mongo_data:
  redis_data:
